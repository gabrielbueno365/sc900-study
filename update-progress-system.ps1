# PowerShell script para atualizar o sistema de progresso em todas as p√°ginas
# Atualiza checklists para incluir data-section apropriado

Write-Host "üîÑ Atualizando sistema de progresso..." -ForegroundColor Cyan

# Definir caminhos
$siteRoot = $PSScriptRoot
$pagesDir = Join-Path $siteRoot "pages"

# Mapping de arquivos para se√ß√µes
$fileMapping = @{
    "fase1.html" = "fase1"
    "fase2.html" = "fase2" 
    "fase3.html" = "fase3"
    "certificacoes.html" = "certificacoes"
    "recursos.html" = "recursos"
}

foreach ($file in $fileMapping.Keys) {
    $filePath = Join-Path $pagesDir $file
    $section = $fileMapping[$file]
    
    if (Test-Path $filePath) {
        Write-Host "üìù Atualizando $file..." -ForegroundColor Yellow
        
        # Ler conte√∫do do arquivo
        $content = Get-Content $filePath -Raw -Encoding UTF8
        
        # Atualizar checklists sem data-section
        $updatedContent = $content -replace 'class="checklist"(?!\s+data-section)', "class=`"checklist`" data-section=`"$section`""
        
        # Atualizar outras listas track√°veis
        $updatedContent = $updatedContent -replace 'class="project-details"(?!\s+data-section)', "class=`"project-details`" data-section=`"$section`""
        $updatedContent = $updatedContent -replace 'class="validation-grid"(?!\s+data-section)', "class=`"validation-grid`" data-section=`"$section`""
        $updatedContent = $updatedContent -replace 'class="phase-objectives"(?!\s+data-section)', "class=`"phase-objectives`" data-section=`"$section`""
        $updatedContent = $updatedContent -replace 'class="objectives"(?!\s+data-section)', "class=`"objectives`" data-section=`"$section`""
        
        # Salvar arquivo atualizado
        $updatedContent | Set-Content $filePath -Encoding UTF8 -NoNewline
        
        Write-Host "‚úÖ $file atualizado com sucesso!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Arquivo n√£o encontrado: $file" -ForegroundColor Red
    }
}

# Verificar se o sistema est√° funcionando
Write-Host "`nüß™ Verificando arquivos atualizados..." -ForegroundColor Cyan

foreach ($file in $fileMapping.Keys) {
    $filePath = Join-Path $pagesDir $file
    if (Test-Path $filePath) {
        $content = Get-Content $filePath -Raw
        $dataSectionCount = ([regex]::Matches($content, 'data-section="')).Count
        Write-Host "üìä $file - $dataSectionCount elementos com data-section" -ForegroundColor Magenta
    }
}

Write-Host "`n‚úÖ Sistema de progresso atualizado com sucesso!" -ForegroundColor Green
Write-Host "üåê Agora todas as listas ser√£o automaticamente track√°veis" -ForegroundColor Cyan
Write-Host "üíæ Progresso ser√° salvo automaticamente no navegador" -ForegroundColor Cyan

# Abrir p√°gina de teste para valida√ß√£o
if (Test-Path "test-progress.html") {
    Write-Host "`nüß™ Abrindo p√°gina de teste..." -ForegroundColor Yellow
    Start-Process "test-progress.html"
}
